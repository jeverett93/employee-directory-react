{"version":3,"sources":["components/Header.js","components/Search.js","utils/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","styles","search","margin","Search","props","style","onChange","handleInputChange","value","name","type","placeholder","id","query","axios","get","table","Table","state","result","originalResult","searchTable","API","then","res","console","log","data","setState","results","catch","err","event","target","newResult","length","filter","employee","first","toLowerCase","includes","last","email","cell","moment","dob","date","format","handleFormSubmit","colName","sort","a","b","localeCompare","this","scope","onClick","map","index","key","src","picture","thumbnail","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.158c930c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Employee Directory</h1>\r\n      <p>Filter by heading or use search bar to narrow results.</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../styles/search.css\";\r\n\r\n\r\nconst styles = {\r\n  search: {\r\n    margin: 30,\r\n  }\r\n}\r\n\r\nfunction Search(props) {\r\n    return (\r\n      <form className=\"search-bar\">\r\n      <div style={styles.search} className=\"form-group\">\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search\"\r\n          id=\"search\"\r\n        />\r\n        </div>\r\n    </form>\r\n    );\r\n  }\r\n  \r\n  export default Search;\r\n\r\n","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\nconst APIKEY = \"&apikey=6WTW-8POB-DZOK-LW3Q\";\r\n\r\nexport default {\r\n  search: function(query) {\r\n    return axios.get(BASEURL + query + APIKEY);\r\n  }\r\n};","import React from \"react\";\r\nimport Header from './Header';\r\nimport Search from './Search';\r\nimport API from \"../utils/API\";\r\nimport moment from \"moment\"\r\nimport \"../styles/table.css\";\r\n\r\n\r\nconst styles = {\r\n  table: {\r\n    margin: 30\r\n  }\r\n}\r\n\r\nclass Table extends React.Component {\r\n  state = {\r\n    result: [],\r\n    originalResult: [],\r\n    search: \"\"\r\n  };\r\n\r\n  // When this component mounts, search for the movie \"The Matrix\"\r\n  componentDidMount() {\r\n    this.searchTable(\"\");\r\n    console.log(this.state.result)\r\n  }\r\n\r\n  searchTable = query => {\r\n    API.search(query)\r\n      .then(res => {\r\n        console.log(res.data)\r\n        this.setState({ result: res.data.results, originalResult: res.data.results })})\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n    const newResult = this.state.originalResult.length > 0 ? this.state.originalResult.filter(employee => {\r\n      console.log(employee)\r\n      return employee.name.first.toLowerCase().includes(value.toLowerCase()) || employee.name.last.toLowerCase().includes(value.toLowerCase()) || employee.email.toLowerCase().includes(value.toLowerCase()) || employee.cell.includes(value) || moment(employee.dob.date).format(\"MM/DD/YYYY\").includes(value)\r\n    }): []\r\n    console.log(newResult)\r\n    this.setState({result: newResult})\r\n  };\r\n\r\n  // When the form is submitted, search the OMDB API for the value of `this.state.search`\r\n  handleFormSubmit = colName => {\r\n    // event.preventDefault();\r\n    // this.searchTable(this.state.search); \r\n    let newResult = null\r\n\r\n    if(colName === \"first\") \r\n    { newResult = this.state.result.length > 0 ? this.state.result.sort((a, b) => a.name.first.localeCompare(b.name.first)):\r\n    []}\r\n    else if(colName === \"email\") {\r\n      newResult = this.state.result.length > 0 ? this.state.result.sort((a, b) => a.email.localeCompare(b.email)):\r\n    []\r\n    }\r\n    else if(colName === \"dob\") {\r\n      newResult = this.state.result.length > 0 ? this.state.result.sort((a, b) => a.dob.date.localeCompare(b.dob.date)):\r\n    []\r\n    }\r\n    this.setState({result: newResult})\r\n  };\r\n\r\n\r\n\r\n\r\nrender() {\r\n    return (\r\n      <div>\r\n      <Header/>\r\n      <Search\r\n      value={this.state.search}\r\n      handleInputChange={this.handleInputChange}\r\n      handleFormSubmit={this.handleFormSubmit}\r\n      />\r\n        <table style={styles.table} className=\"table\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">image</th>\r\n            <th scope=\"col\" onClick={() => {this.handleFormSubmit(\"first\")}}>Name</th>\r\n            <th scope=\"col\">Phone</th>\r\n            <th scope=\"col\" onClick={() => {this.handleFormSubmit(\"email\")}}>Email</th>\r\n            <th scope=\"col\" onClick={() => {this.handleFormSubmit(\"dob\")}}>DOB</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.state.result.length > 0 ?\r\n          this.state.result.map((employee, index) =>{\r\n            return(<tr key={index}>\r\n              <td><img src={employee.picture.thumbnail} alt=\"employee\"/></td>\r\n              <td>{employee.name.first + \" \" + employee.name.last}</td>\r\n              <td>{employee.cell}</td>\r\n              <td>{employee.email}</td>\r\n              <td>{moment(employee.dob.date).format(\"MM/DD/YYYY\")}</td>\r\n            </tr>)\r\n          }) :\r\n          \"\"\r\n          } \r\n        </tbody>\r\n      </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n  \r\n  export default Table;\r\n\r\n  //   make a class component","import React from 'react';\nimport Table from './components/Table'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table/>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}